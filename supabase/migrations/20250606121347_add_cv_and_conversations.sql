-- Create table for dossiers
CREATE TABLE IF NOT EXISTS dossiers (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom TEXT NOT NULL,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    mot_de_passe TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Enable RLS for dossiers
ALTER TABLE dossiers ENABLE ROW LEVEL SECURITY;

-- Create policies for dossiers
CREATE POLICY "Users can view their own dossiers"
    ON dossiers FOR SELECT
    USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own dossiers"
    ON dossiers FOR INSERT
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own dossiers"
    ON dossiers FOR UPDATE
    USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own dossiers"
    ON dossiers FOR DELETE
    USING (auth.uid() = user_id);

-- Create table for CVs
CREATE TABLE IF NOT EXISTS cvs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dossier_id BIGINT REFERENCES dossiers(id) ON DELETE CASCADE,
    file_name TEXT NOT NULL,
    file_path TEXT NOT NULL,
    file_type TEXT NOT NULL,
    file_size BIGINT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Drop existing table and policies
DROP TABLE IF EXISTS conversations CASCADE;

-- Create conversations table
CREATE TABLE conversations (
    id BIGSERIAL PRIMARY KEY,
    dossier_id BIGINT REFERENCES dossiers(id) ON DELETE CASCADE,
    message TEXT NOT NULL,
    is_ai BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    is_read BOOLEAN DEFAULT FALSE
);

-- Enable RLS
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view their own conversations"
ON conversations FOR SELECT
USING (
    dossier_id IN (
        SELECT id FROM dossiers
        WHERE user_id = auth.uid()
    )
);

CREATE POLICY "Users can insert their own messages"
ON conversations FOR INSERT
WITH CHECK (
    dossier_id IN (
        SELECT id FROM dossiers
        WHERE user_id = auth.uid()
    )
    AND is_ai = false
);

CREATE POLICY "Admins can insert responses"
ON conversations FOR INSERT
WITH CHECK (
    auth.uid() IN (
        SELECT user_id FROM users
        WHERE role = 'admin'
    )
    AND is_ai = true
);

CREATE POLICY "Admins can view all conversations"
ON conversations FOR SELECT
USING (
    auth.uid() IN (
        SELECT user_id FROM users
        WHERE role = 'admin'
    )
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_cvs_dossier_id ON cvs(dossier_id);
CREATE INDEX IF NOT EXISTS idx_conversations_dossier_id ON conversations(dossier_id);
CREATE INDEX IF NOT EXISTS idx_dossiers_user_id ON dossiers(user_id);

-- Add RLS policies
ALTER TABLE cvs ENABLE ROW LEVEL SECURITY;

-- Policies for CVs
CREATE POLICY "Users can view their own CVs"
    ON cvs FOR SELECT
    USING (dossier_id IN (
        SELECT id FROM dossiers 
        WHERE auth.uid() = user_id
    ));

CREATE POLICY "Users can insert their own CVs"
    ON cvs FOR INSERT
    WITH CHECK (dossier_id IN (
        SELECT id FROM dossiers 
        WHERE auth.uid() = user_id
    ));

CREATE POLICY "Users can update their own CVs"
    ON cvs FOR UPDATE
    USING (dossier_id IN (
        SELECT id FROM dossiers 
        WHERE auth.uid() = user_id
    ));

CREATE POLICY "Users can delete their own CVs"
    ON cvs FOR DELETE
    USING (dossier_id IN (
        SELECT id FROM dossiers 
        WHERE auth.uid() = user_id
    ));

-- Table pour les disponibilités des contacts
CREATE TABLE IF NOT EXISTS disponibilites (
    id BIGSERIAL PRIMARY KEY,
    contact_id BIGINT NOT NULL,
    date DATE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Index pour accélérer les recherches par contact et date
CREATE INDEX IF NOT EXISTS idx_disponibilites_contact_id ON disponibilites(contact_id);
CREATE INDEX IF NOT EXISTS idx_disponibilites_date ON disponibilites(date);
